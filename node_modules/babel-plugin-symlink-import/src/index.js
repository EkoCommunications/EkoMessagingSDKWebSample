'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = function () {
  return {
    visitor: {
      [importAndExport](astPath, astState) {
        if (!astPath.node.source) {
          return;
        }

        const importedPath = astPath.node.source.value;
        const sourceFilePath = astState.file.opts.filename;

        let myLinksFilePath = '';
        let myLinks = {};

        if (isLocalPackagePath(importedPath)) {
          return;
        }

        try {
          const {
            path: packageJsonPath,
            data: packageJson
          } = (0, _findNearestPackageJson.findNearestPackageJsonSync)(sourceFilePath);

          myLinksFilePath = (0, _findNearestPackageJson.findNearestPackageJsonSync)(sourceFilePath).path.replace('package.json', '.myLinks');

          myLinks = readMyLinksFile(myLinksFilePath);

          const localDependencies = readLocalDependencies(packageJson, myLinks);
          const projectPath = path.dirname(packageJsonPath);
          const importedModuleName = importedPath.split(path.sep)[0];

          if (!(importedModuleName in localDependencies)) {
            return;
          }

          const importedModuleRootPath = localDependencies[importedModuleName];
          const importedPathRelativeToProjectPath = path.join(importedModuleRootPath, ...importedPath.split(path.sep).slice(1));

          astPath.node.source.value = resolveRelativePath(path.dirname(sourceFilePath), path.join(projectPath, importedPathRelativeToProjectPath));
        } catch (error) {}
      }
    }
  };
};

var _path = require('path');

var path = _interopRequireWildcard(_path);

var _findNearestPackageJson = require('find-nearest-package-json');

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const importAndExport = 'ImportDeclaration|ExportAllDeclaration|ExportNamedDeclaration';

function isLocalPackagePath(versionOrUrlOrPath) {
  return ['file:', 'link:', '../', './', '~/', '/'].some(prefix => versionOrUrlOrPath.startsWith(prefix));
}

function readMyLinksFile(myLinksFilePath) {
  try {
    return JSON.parse(fs.readFileSync(myLinksFilePath, { encoding: 'utf8' })).links;
  } catch (err) {
    return {};
  }
}

function readLocalDependencies(packageJson, myLinksFile) {
  const dependencies = _extends({}, packageJson.dependencies, packageJson.devDependencies);

  return Object.keys(dependencies).reduce((localDependencies, name) => {
    if (myLinksFile[name] && isLocalPackagePath(myLinksFile[name])) {
      dependencies[name] = myLinksFile[name];
    }
    return isLocalPackagePath(dependencies[name]) ? _extends({}, localDependencies, {
      [name]: parseLocalPackagePath(dependencies[name])
    }) : localDependencies;
  }, {});
}

function parseLocalPackagePath(localPackagePath) {
  return localPackagePath.replace(/^.*?:/, '');
}

function resolveRelativePath(fromPath, toPath) {
  const relativePath = path.relative(fromPath, toPath);

  if (relativePath === '') {
    return '.';
  }

  if (relativePath === '..') {
    return '..';
  }

  return `.${path.sep}${relativePath}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,