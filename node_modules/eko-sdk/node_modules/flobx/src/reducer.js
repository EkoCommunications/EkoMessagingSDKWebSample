/* @flow */

import StateStore from './store';

function errorMethod(): void {
  throw new Error('A reducer method should not be called directly, use dispatcher shortcut');
}

/**
 * export @reducer decorator
 * the reducer decorator marks a method as a state reducer handler when a new action
 * is dispatched
 */
export function reducer(target: StateStore, key: string, descriptor: Object): Object {
  // flow-disable-line (R: flow doesn't recognise prototopy)
  if (!(target.constructor.prototype instanceof StateStore)) {
    throw new Error('@reducer decorator can only be used on a StateStore');
  }

  const mutatedDescriptor = descriptor;
  const actionType = key.replace('_', '');

  if (!target._reducers) {
    target._reducers = new Map();
    target._globalReducers = new Map();
  }

  // build the action handler based on reducer value
  const isGlobal = (actionType.indexOf('/') !== -1);
  if (isGlobal) {
    target._globalReducers.set(actionType, descriptor.value);
  } else {
    target._reducers.set(actionType, descriptor.value);
  }

  // reducers should not be changed after being defined
  mutatedDescriptor.writable = false;
  // a reducer don't need to be enumerated over
  mutatedDescriptor.enumerable = false;
  // remove the actual method from class so it won't be accidentally called
  mutatedDescriptor.value = errorMethod;

  return mutatedDescriptor;
}
